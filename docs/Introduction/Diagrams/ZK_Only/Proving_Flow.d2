proving_flow: Proving Flow {
  in_zk: In ZK Circuit {
    image_hash: Hash of Image Data
    image_signature: Image Signature
    camera_pubkey: Camera Public Key
    camera_pubkey_signature: Signed Camera Public Key
    authority_pubkey: Trusted Authority's Public Key

    image_hash.shape: parallelogram
    image_signature.shape: parallelogram
    camera_pubkey.shape: parallelogram
    camera_pubkey_signature.shape: parallelogram
    authority_pubkey.shape: parallelogram

    image_signature.style.fill: "#ffffaf"
    camera_pubkey.style.fill: "#ffffaf"
    camera_pubkey_signature.style.fill: "#ffffaf"

    is_camera_certified.shape: rectangle
    is_image_verified.shape: rectangle

    failed: Proof Failed
    success: Proof Generated

    failed.style.fill: "#ffafaf"
    success.style.fill: "#afffaf"

    failed.shape: hexagon
    success.shape: hexagon

    is_image_verified: Check Signature
    image_hash -> is_image_verified
    image_signature -> is_image_verified
    camera_pubkey -> is_image_verified

    is_camera_certified: Check Signature
    camera_pubkey -> is_camera_certified
    camera_pubkey_signature -> is_camera_certified
    authority_pubkey -> is_camera_certified

    camera_and_image_certified: Is Camera Certified, AND Is Image Signed By Camera?
    camera_and_image_certified.shape: diamond
    is_camera_certified -> camera_and_image_certified: true or false
    is_image_verified -> camera_and_image_certified: true or false
    camera_and_image_certified -> success: "true"

    camera_and_image_certified -> failed: "false"
  }

  image: Image, With Metadata (Signature-Only)
  image.shape: parallelogram

  hash_function: Hash Function

  image -> hash_function: image data
  hash_function -> inputs.image_hash: hash of image data

  # Get Prover Inputs From Signature-Based Scheme
  orig_image_metadata: Image Metadata
  orig_image_metadata -> inputs.image_signature: image signature
  orig_image_metadata -> inputs.camera_pubkey: camera public key
  orig_image_metadata -> inputs.camera_pubkey_signature: Signed Camera Public Key
  orig_image_metadata -> inputs.authority_pubkey: trusted authority public key

  image -> orig_image_metadata: get image metadata

  inputs: Inputs {
    # Private Inputs
    image_signature: Image Signature
    camera_pubkey: Camera Public Key
    camera_pubkey_signature: Signed Camera Public Key

    image_signature.shape: parallelogram
    camera_pubkey.shape: parallelogram
    camera_pubkey_signature.shape: parallelogram

    image_signature.style.fill: "#ffffaf"
    camera_pubkey.style.fill: "#ffffaf"
    camera_pubkey_signature.style.fill: "#ffffaf"

    # Public Inputs
    image_hash: Hash of Image Data
    authority_pubkey: Trusted Authority's Public Key

    image_hash.shape: parallelogram
    authority_pubkey.shape: parallelogram
  }

  inputs.image_hash -> in_zk.image_hash
  inputs.image_signature -> in_zk.image_signature
  inputs.camera_pubkey -> in_zk.camera_pubkey
  inputs.camera_pubkey_signature -> in_zk.camera_pubkey_signature
  inputs.authority_pubkey -> in_zk.authority_pubkey

  verification_data: Verification Metadata {
    zkp: ZK Proof
    zkp.shape: parallelogram

    authority_pubkey: Trusted Authority's Public Key
    authority_pubkey.shape: parallelogram
  }
  
  inputs.authority_pubkey -> verification_data.authority_pubkey
  in_zk -> verification_data.zkp

  new_image: Image, With Proof
  new_image.shape: parallelogram

  verification_data -> new_image: add metadata
  image -> new_image: image data
}