import{_ as e,c as i,o as t,a2 as a}from"./chunks/framework.CCypsxA0.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Implementations/see3-js/Setup.md","filePath":"Implementations/see3-js/Setup.md"}'),s={name:"Implementations/see3-js/Setup.md"},r=a(`<h3 id="initializedevice-function" tabindex="-1"><code>initializeDevice</code> Function <a class="header-anchor" href="#initializedevice-function" aria-label="Permalink to &quot;\`initializeDevice\` Function&quot;">​</a></h3><p>Initializes a device by generating a key pair and preparing a certificate request. This function generates a new private key for the device and uses it to compute the device&#39;s public key. The client software must securely store the returned private key. A certificate request is also prepared, which the client can send to a trusted authority to receive their device certificate. The resulting data, including the private key, should be securely stored by the client in a <code>CaptureDeviceData</code> type.</p><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><ul><li><code>ta_public_key: ECPoint</code> - The public key of the trusted authority, used in the certificate request.</li><li><code>request_body: object</code> - Additional data to be included in the certificate request, e.g., a hardware-based device inte### <code>generateImageCropProof</code> Function</li></ul><p>Generates a cryptographic proof for an image crop operation and returns the cropped image file along with the proof. This function handles the entire process from converting the image file to bytes, generating cryptographic hashes, setting up cryptographic circuits, and generating zero-knowledge proofs.</p><h4 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><ul><li><code>imageFile: File</code> - The original image file.</li><li><code>cropInput: CropInput</code> - The input parameters for the crop operation.</li><li><code>fromManifest: ManifestName</code> - The manifest name from which the image originates.</li></ul><h4 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><ul><li><code>Promise&lt;Result&lt;{eqProof: See3EqProof, croppedImage: File}, Error&gt;&gt;</code>: A promise that resolves to a result object containing the proof and cropped image file or an error.</li></ul><h4 id="process" tabindex="-1">Process <a class="header-anchor" href="#process" aria-label="Permalink to &quot;Process&quot;">​</a></h4><ol><li><strong>Convert Image to Bytes</strong>: Converts the original image file to RGB bytes.</li><li><strong>Generate Prover Inputs</strong>: Asynchronously gathers necessary data for proof generation: <ul><li>Crop circuit configuration.</li><li>Image data converted to field elements.</li><li>Hash of the original image.</li><li>Cropped image and its hash.</li></ul></li><li><strong>Error Handling</strong>: If there is an error in generating prover inputs, it returns an error.</li><li><strong>Setup Cryptographic Environment</strong>: Initializes necessary cryptographic modules and configurations.</li><li><strong>Generate Cryptographic Proof</strong>: Using Noir and Barretenberg backend, generates a zero-knowledge proof for the crop operation.</li><li><strong>Construct Equality Proof (eqProof)</strong>: Packages the cryptographic proof with additional metadata about the edit operation.</li><li><strong>Return Results</strong>: Returns the equality proof and the file of the cropped image.</li></ol><h4 id="example-usage" tabindex="-1">Example Usage <a class="header-anchor" href="#example-usage" aria-label="Permalink to &quot;Example Usage&quot;">​</a></h4><p>grity proof.</p><h4 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><ul><li>An object containing: <ul><li><code>privateKey</code>: The generated private key for the device.</li><li><code>certificateRequest</code>: An object containing: <ul><li><code>ta-public-key</code>: The public key of the trusted authority.</li><li><code>camera-public-key</code>: An object with properties <code>x</code> and <code>y</code> representing the device&#39;s public key coordinates.</li><li><code>request_body</code>: The additional data provided in the certificate request.</li></ul></li></ul></li></ul><h4 id="example-usage-1" tabindex="-1">Example Usage <a class="header-anchor" href="#example-usage-1" aria-label="Permalink to &quot;Example Usage&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> taPublicKey</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0x....&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0x....&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> requestBody</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { deviceIntegrity: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;valid&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> deviceData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> initializeDevice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(taPublicKey, requestBody);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(deviceData);</span></span></code></pre></div>`,17),o=[r];function n(l,c,h,p,d,u){return t(),i("div",null,o)}const y=e(s,[["render",n]]);export{k as __pageData,y as default};
