import{_ as s,c as i,o as t,a2 as e}from"./chunks/framework.CCypsxA0.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Implementations/see3-js/Proving.md","filePath":"Implementations/see3-js/Proving.md"}'),a={name:"Implementations/see3-js/Proving.md"},n=e(`<h3 id="overview-of-attestation-functions-in-attest-ts" tabindex="-1">Overview of Attestation Functions in <code>attest.ts</code> <a class="header-anchor" href="#overview-of-attestation-functions-in-attest-ts" aria-label="Permalink to &quot;Overview of Attestation Functions in \`attest.ts\`&quot;">​</a></h3><p>This TypeScript module contains functions for generating cryptographic attestations for image files using zero-knowledge proofs (ZKP). It utilizes cryptographic backends and circuits to ensure the integrity and authenticity of the data.</p><h4 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h4><ol><li><p><strong><code>attestationProofGenerator</code></strong></p><ul><li><strong>Purpose</strong>: Generates a cryptographic zero-knowledge proof based on provided prover inputs.</li><li><strong>Parameters</strong>: <ul><li><code>input: AttestationProverInputMap</code> - The prover inputs required for generating the proof.</li></ul></li><li><strong>Returns</strong>: A promise that resolves to a base64 encoded string of the proof or null if an error occurs.</li><li><strong>Process</strong>: <ul><li>Initializes cryptographic modules.</li><li>Configures and utilizes the Noir library with the Barretenberg backend to generate the proof.</li></ul></li></ul></li><li><p><strong><code>generateAttestationProverInputs</code></strong></p><ul><li><strong>Purpose</strong>: Prepares the necessary prover inputs for generating a cryptographic proof.</li><li><strong>Parameters</strong>: <ul><li><code>file: File</code> - The file from which the image data hash is generated.</li><li><code>sigProof: SigProof</code> - The signatures and public keys required for the attestation.</li></ul></li><li><strong>Returns</strong>: A promise that resolves to the formatted prover inputs or null if an error occurs.</li><li><strong>Process</strong>: <ul><li>Sets up Elliptic Curve Diffie-Hellman (ECDH).</li><li>Retrieves necessary keys and certificates.</li><li>Formats them for proof generation.</li></ul></li></ul></li><li><p><strong><code>proveAttestation</code></strong></p><ul><li><strong>Purpose</strong>: Generates a zero-knowledge proof for a chain of signatures provided in <code>sigProof</code>.</li><li><strong>Parameters</strong>: <ul><li><code>input: File</code> - The input file for which the attestation is being generated.</li><li><code>sigProof: SigProof</code> - An object containing the signatures and public keys required to generate the ZKP.</li></ul></li><li><strong>Returns</strong>: A promise that resolves to a <code>See3Attestation</code> object containing the ZKP if successful, or throws an error if an error occurs.</li><li><strong>Process</strong>: <ul><li>Orchestrates the generation of prover inputs and the subsequent proof generation.</li></ul></li></ul></li><li><p><strong><code>generateAttestation</code></strong></p><ul><li><strong>Purpose</strong>: Generates an attestation for a given input file using the camera&#39;s private key, the TA&#39;s public key, and the TA&#39;s certificate.</li><li><strong>Parameters</strong>: <ul><li><code>input: File</code> - The input file to be attested.</li><li><code>captureDeviceData: CaptureDeviceData</code> - An object containing the necessary data for the attestation process.</li></ul></li><li><strong>Returns</strong>: A promise that resolves to a <code>See3Attestation</code> object if the attestation is successfully generated, or <code>null</code> if an error occurs.</li><li><strong>Process</strong>: <ul><li>Utilizes the <code>proveAttestation</code> function to generate the attestation.</li></ul></li></ul></li><li><p><strong><code>generateTestAttestation</code></strong></p><ul><li><strong>Purpose</strong>: Generates a test attestation using hardcoded values for the camera&#39;s public key, the TA&#39;s public key, and the TA&#39;s certificate.</li><li><strong>Parameters</strong>: <ul><li><code>input: File</code> - The input file to be attested.</li></ul></li><li><strong>Returns</strong>: A promise that resolves to a <code>See3Attestation</code> object if the attestation is successfully generated, or <code>null</code> if an error occurs.</li><li><strong>Process</strong>: <ul><li>Similar to <code>generateAttestation</code> but uses hardcoded values for testing purposes.</li></ul></li></ul></li></ol><h4 id="usage-example" tabindex="-1">Usage Example <a class="header-anchor" href="#usage-example" aria-label="Permalink to &quot;Usage Example&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> inputFile</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> captureDeviceData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;camera-private-key&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0x123&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ta-public-key&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0xabc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0xdef&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ta-signature&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;signature-R&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { x: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0x101&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0x202&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;signature-s&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0x303&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generateAttestation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(inputFile, captureDeviceData)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">attestation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (attestation) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Attestation generated:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, attestation);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Failed to generate attestation.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Error:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, error);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>This module is essential for ensuring the security and verifiability of image files, particularly in contexts where proof of authenticity is critical.</p>`,7),l=[n];function r(o,h,p,k,g,c){return t(),i("div",null,l)}const u=s(a,[["render",r]]);export{E as __pageData,u as default};
